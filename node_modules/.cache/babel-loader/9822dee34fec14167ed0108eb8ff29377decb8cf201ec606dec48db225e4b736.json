{"ast":null,"code":"import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\":\n        // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, {\n          unit: \"quarter\"\n        });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return match.quarter(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return match.quarter(dateString, {\n          width: \"wide\",\n          context: \"standalone\"\n        }) || match.quarter(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n    }\n  }\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n  incompatibleTokens = [\"Y\", \"R\", \"Q\", \"M\", \"L\", \"w\", \"I\", \"d\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}","map":{"version":3,"names":["Parser","parseNDigits","StandAloneQuarterParser","priority","parse","dateString","token","match","length","ordinalNumber","unit","quarter","width","context","validate","_date","value","set","date","_flags","setMonth","setHours","incompatibleTokens"],"sources":["D:/projeto-ts/node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.mjs"],"sourcesContent":["import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,YAAY,QAAQ,cAAc;AAE3C,OAAO,MAAMC,uBAAuB,SAASF,MAAM,CAAC;EAClDG,QAAQ,GAAG,GAAG;EAEdC,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,QAAQD,KAAK;MACX;MACA,KAAK,GAAG;MACR,KAAK,IAAI;QAAE;QACT,OAAOL,YAAY,CAACK,KAAK,CAACE,MAAM,EAAEH,UAAU,CAAC;MAC/C;MACA,KAAK,IAAI;QACP,OAAOE,KAAK,CAACE,aAAa,CAACJ,UAAU,EAAE;UAAEK,IAAI,EAAE;QAAU,CAAC,CAAC;MAC7D;MACA,KAAK,KAAK;QACR,OACEH,KAAK,CAACI,OAAO,CAACN,UAAU,EAAE;UACxBO,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFN,KAAK,CAACI,OAAO,CAACN,UAAU,EAAE;UACxBO,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;;MAGN;MACA,KAAK,OAAO;QACV,OAAON,KAAK,CAACI,OAAO,CAACN,UAAU,EAAE;UAC/BO,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MACA,KAAK,MAAM;MACX;QACE,OACEN,KAAK,CAACI,OAAO,CAACN,UAAU,EAAE;UACxBO,KAAK,EAAE,MAAM;UACbC,OAAO,EAAE;QACX,CAAC,CAAC,IACFN,KAAK,CAACI,OAAO,CAACN,UAAU,EAAE;UACxBO,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFN,KAAK,CAACI,OAAO,CAACN,UAAU,EAAE;UACxBO,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;IAER;EACF;EAEAC,QAAQA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACrB,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,CAAC;EACjC;EAEAC,GAAGA,CAACC,IAAI,EAAEC,MAAM,EAAEH,KAAK,EAAE;IACvBE,IAAI,CAACE,QAAQ,CAAC,CAACJ,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjCE,IAAI,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAOH,IAAI;EACb;EAEAI,kBAAkB,GAAG,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}