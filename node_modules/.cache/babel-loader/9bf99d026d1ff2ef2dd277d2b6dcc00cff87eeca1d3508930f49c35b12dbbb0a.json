{"ast":null,"code":"var _jsxFileName = \"D:\\\\projeto-ts\\\\src\\\\layout\\\\PatientList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientList = () => {\n  _s();\n  const [patients, setPatients] = useState([]);\n  useEffect(() => {\n    // Aqui você fará uma chamada à API para obter a lista de pacientes do backend\n    // Por enquanto, vamos usar dados de exemplo\n    const samplePatients = [{\n      id: 1,\n      name: \"João Silva\",\n      age: 45,\n      condition: \"Hipertensão\"\n    }, {\n      id: 2,\n      name: \"Maria Santos\",\n      age: 32,\n      condition: \"Diabetes\"\n    }, {\n      id: 3,\n      name: \"José Oliveira\",\n      age: 60,\n      condition: \"Artrite\"\n    }\n    // Outros pacientes...\n    ];\n\n    setPatients(samplePatients);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lista de Pacientes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Nome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Idade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Condi\\xE7\\xE3o M\\xE9dica\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: patients.map(patient => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: patient.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: patient.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: patient.age\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: patient.condition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this)]\n        }, patient.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientList, \"2mHPNi2MF+s8ms7PrTd3nXwgmV8=\");\n_c = PatientList;\nexport default PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","PatientList","_s","patients","setPatients","samplePatients","id","name","age","condition","children","fileName","_jsxFileName","lineNumber","columnNumber","map","patient","_c","$RefreshReg$"],"sources":["D:/projeto-ts/src/layout/PatientList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\n\nconst PatientList: React.FC = () => {\n  const [patients, setPatients] = useState([]);\n\n  useEffect(() => {\n    // Aqui você fará uma chamada à API para obter a lista de pacientes do backend\n    // Por enquanto, vamos usar dados de exemplo\n    const samplePatients = [\n      { id: 1, name: \"João Silva\", age: 45, condition: \"Hipertensão\" },\n      { id: 2, name: \"Maria Santos\", age: 32, condition: \"Diabetes\" },\n      { id: 3, name: \"José Oliveira\", age: 60, condition: \"Artrite\" },\n      // Outros pacientes...\n    ];\n    setPatients(samplePatients);\n  }, []);\n\n  return (\n    <div>\n      <h2>Lista de Pacientes</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Nome</th>\n            <th>Idade</th>\n            <th>Condição Médica</th>\n          </tr>\n        </thead>\n        <tbody>\n          {patients.map((patient) => (\n            <tr key={patient.id}>\n              <td>{patient.id}</td>\n              <td>{patient.name}</td>\n              <td>{patient.age}</td>\n              <td>{patient.condition}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default PatientList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}