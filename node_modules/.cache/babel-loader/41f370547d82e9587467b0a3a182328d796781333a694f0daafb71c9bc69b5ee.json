{"ast":null,"code":"var _jsxFileName = \"D:\\\\projeto-ts\\\\src\\\\components\\\\ProntuarioElect.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ElectronicHealthRecord = () => {\n  _s();\n  const [selectedPatient, setSelectedPatient] = useState(\"\");\n  const [viewType, setViewType] = useState(\"table\"); // Definindo 'table' como o tipo de visualização padrão\n\n  // lógica para obter os dados de saúde do paciente selecionado\n  // e atualizar o estado \"healthData\"\n\n  const handlePatientSelect = patientId => {\n    setSelectedPatient(patientId);\n    // chamada à API para obter os dados de saúde do paciente selecionado\n    // e atualizar o estado \"healthData\"\n  };\n\n  // Função para alternar entre visualização por tabela e visualização por gráfico\n  const toggleViewType = () => {\n    setViewType(prevViewType => prevViewType === \"table\" ? \"graph\" : \"table\");\n  };\n\n  // Renderização condicional com base no tipo de visualização selecionado\n  const renderContent = () => {\n    if (viewType === \"table\") {\n      return (\n        /*#__PURE__*/\n        // Aqui você renderizaria os dados de saúde do paciente em uma tabela\n        _jsxDEV(\"div\", {\n          children: \"Tabela de Dados de Sa\\xFAde\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this)\n      );\n    } else {\n      return (\n        /*#__PURE__*/\n        // Aqui você renderizaria os dados de saúde do paciente em um gráfico\n        _jsxDEV(\"div\", {\n          children: \"Gr\\xE1fico de Dados de Sa\\xFAde\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this)\n      );\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Prontu\\xE1rio Eletr\\xF4nico Personaliz\\xE1vel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedPatient,\n      onChange: e => handlePatientSelect(e.target.value),\n      children: /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Selecione um paciente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleViewType,\n        children: [\"Visualiza\\xE7\\xE3o: \", viewType === \"table\" ? \"Tabela\" : \"Gráfico\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), renderContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(ElectronicHealthRecord, \"q+RM9BWQclXJeOwfwnp8Uq+gJU8=\");\n_c = ElectronicHealthRecord;\nexport default ElectronicHealthRecord;\nvar _c;\n$RefreshReg$(_c, \"ElectronicHealthRecord\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ElectronicHealthRecord","_s","selectedPatient","setSelectedPatient","viewType","setViewType","handlePatientSelect","patientId","toggleViewType","prevViewType","renderContent","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/projeto-ts/src/components/ProntuarioElect.tsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst ElectronicHealthRecord: React.FC = () => {\n  const [selectedPatient, setSelectedPatient] = useState(\"\");\n  const [viewType, setViewType] = useState(\"table\"); // Definindo 'table' como o tipo de visualização padrão\n\n  // lógica para obter os dados de saúde do paciente selecionado\n  // e atualizar o estado \"healthData\"\n\n  const handlePatientSelect = (patientId: string) => {\n    setSelectedPatient(patientId);\n    // chamada à API para obter os dados de saúde do paciente selecionado\n    // e atualizar o estado \"healthData\"\n  };\n\n  // Função para alternar entre visualização por tabela e visualização por gráfico\n  const toggleViewType = () => {\n    setViewType((prevViewType) =>\n      prevViewType === \"table\" ? \"graph\" : \"table\"\n    );\n  };\n\n  // Renderização condicional com base no tipo de visualização selecionado\n  const renderContent = () => {\n    if (viewType === \"table\") {\n      return (\n        // Aqui você renderizaria os dados de saúde do paciente em uma tabela\n        <div>Tabela de Dados de Saúde</div>\n      );\n    } else {\n      return (\n        // Aqui você renderizaria os dados de saúde do paciente em um gráfico\n        <div>Gráfico de Dados de Saúde</div>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <h2>Prontuário Eletrônico Personalizável</h2>\n      <select\n        value={selectedPatient}\n        onChange={(e) => handlePatientSelect(e.target.value)}\n      >\n        <option value=\"\">Selecione um paciente</option>\n        {/* Aqui você poderia mapear os pacientes disponíveis e criar as opções do select */}\n      </select>\n      <div>\n        <button onClick={toggleViewType}>\n          Visualização: {viewType === \"table\" ? \"Tabela\" : \"Gráfico\"}\n        </button>\n      </div>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default ElectronicHealthRecord;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,sBAAgC,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEnD;EACA;;EAEA,MAAMS,mBAAmB,GAAIC,SAAiB,IAAK;IACjDJ,kBAAkB,CAACI,SAAS,CAAC;IAC7B;IACA;EACF,CAAC;;EAED;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BH,WAAW,CAAEI,YAAY,IACvBA,YAAY,KAAK,OAAO,GAAG,OAAO,GAAG,OACvC,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIN,QAAQ,KAAK,OAAO,EAAE;MACxB;QAAA;QACE;QACAL,OAAA;UAAAY,QAAA,EAAK;QAAwB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;IAEvC,CAAC,MAAM;MACL;QAAA;QACE;QACAhB,OAAA;UAAAY,QAAA,EAAK;QAAyB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;IAExC;EACF,CAAC;EAED,oBACEhB,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAoC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7ChB,OAAA;MACEiB,KAAK,EAAEd,eAAgB;MACvBe,QAAQ,EAAGC,CAAC,IAAKZ,mBAAmB,CAACY,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAAAL,QAAA,eAErDZ,OAAA;QAAQiB,KAAK,EAAC,EAAE;QAAAL,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEzC,CAAC,eACThB,OAAA;MAAAY,QAAA,eACEZ,OAAA;QAAQqB,OAAO,EAAEZ,cAAe;QAAAG,QAAA,GAAC,sBACjB,EAACP,QAAQ,KAAK,OAAO,GAAG,QAAQ,GAAG,SAAS;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACLL,aAAa,CAAC,CAAC;EAAA;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;AAACd,EAAA,CArDID,sBAAgC;AAAAqB,EAAA,GAAhCrB,sBAAgC;AAuDtC,eAAeA,sBAAsB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}