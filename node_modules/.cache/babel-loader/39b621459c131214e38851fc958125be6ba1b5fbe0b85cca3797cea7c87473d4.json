{"ast":null,"code":"import { add } from \"./add.mjs\";\nimport { differenceInDays } from \"./differenceInDays.mjs\";\nimport { differenceInHours } from \"./differenceInHours.mjs\";\nimport { differenceInMinutes } from \"./differenceInMinutes.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { differenceInYears } from \"./differenceInYears.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval to convert to duration\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\nexport function intervalToDuration(interval) {\n  const start = toDate(interval.start);\n  const end = toDate(interval.end);\n  const duration = {};\n  const years = differenceInYears(end, start);\n  if (years) duration.years = years;\n  const remainingMonths = add(start, {\n    years: duration.years\n  });\n  const months = differenceInMonths(end, remainingMonths);\n  if (months) duration.months = months;\n  const remainingDays = add(remainingMonths, {\n    months: duration.months\n  });\n  const days = differenceInDays(end, remainingDays);\n  if (days) duration.days = days;\n  const remainingHours = add(remainingDays, {\n    days: duration.days\n  });\n  const hours = differenceInHours(end, remainingHours);\n  if (hours) duration.hours = hours;\n  const remainingMinutes = add(remainingHours, {\n    hours: duration.hours\n  });\n  const minutes = differenceInMinutes(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n  const remainingSeconds = add(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  const seconds = differenceInSeconds(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n  return duration;\n}\n\n// Fallback for modularized imports:\nexport default intervalToDuration;","map":{"version":3,"names":["add","differenceInDays","differenceInHours","differenceInMinutes","differenceInMonths","differenceInSeconds","differenceInYears","toDate","intervalToDuration","interval","start","end","duration","years","remainingMonths","months","remainingDays","days","remainingHours","hours","remainingMinutes","minutes","remainingSeconds","seconds"],"sources":["D:/projeto-ts/node_modules/date-fns/intervalToDuration.mjs"],"sourcesContent":["import { add } from \"./add.mjs\";\nimport { differenceInDays } from \"./differenceInDays.mjs\";\nimport { differenceInHours } from \"./differenceInHours.mjs\";\nimport { differenceInMinutes } from \"./differenceInMinutes.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { differenceInYears } from \"./differenceInYears.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval to convert to duration\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\nexport function intervalToDuration(interval) {\n  const start = toDate(interval.start);\n  const end = toDate(interval.end);\n\n  const duration = {};\n\n  const years = differenceInYears(end, start);\n  if (years) duration.years = years;\n\n  const remainingMonths = add(start, { years: duration.years });\n\n  const months = differenceInMonths(end, remainingMonths);\n  if (months) duration.months = months;\n\n  const remainingDays = add(remainingMonths, { months: duration.months });\n\n  const days = differenceInDays(end, remainingDays);\n  if (days) duration.days = days;\n\n  const remainingHours = add(remainingDays, { days: duration.days });\n\n  const hours = differenceInHours(end, remainingHours);\n  if (hours) duration.hours = hours;\n\n  const remainingMinutes = add(remainingHours, { hours: duration.hours });\n\n  const minutes = differenceInMinutes(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n\n  const remainingSeconds = add(remainingMinutes, { minutes: duration.minutes });\n\n  const seconds = differenceInSeconds(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n\n  return duration;\n}\n\n// Fallback for modularized imports:\nexport default intervalToDuration;\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,WAAW;AAC/B,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAE;EAC3C,MAAMC,KAAK,GAAGH,MAAM,CAACE,QAAQ,CAACC,KAAK,CAAC;EACpC,MAAMC,GAAG,GAAGJ,MAAM,CAACE,QAAQ,CAACE,GAAG,CAAC;EAEhC,MAAMC,QAAQ,GAAG,CAAC,CAAC;EAEnB,MAAMC,KAAK,GAAGP,iBAAiB,CAACK,GAAG,EAAED,KAAK,CAAC;EAC3C,IAAIG,KAAK,EAAED,QAAQ,CAACC,KAAK,GAAGA,KAAK;EAEjC,MAAMC,eAAe,GAAGd,GAAG,CAACU,KAAK,EAAE;IAAEG,KAAK,EAAED,QAAQ,CAACC;EAAM,CAAC,CAAC;EAE7D,MAAME,MAAM,GAAGX,kBAAkB,CAACO,GAAG,EAAEG,eAAe,CAAC;EACvD,IAAIC,MAAM,EAAEH,QAAQ,CAACG,MAAM,GAAGA,MAAM;EAEpC,MAAMC,aAAa,GAAGhB,GAAG,CAACc,eAAe,EAAE;IAAEC,MAAM,EAAEH,QAAQ,CAACG;EAAO,CAAC,CAAC;EAEvE,MAAME,IAAI,GAAGhB,gBAAgB,CAACU,GAAG,EAAEK,aAAa,CAAC;EACjD,IAAIC,IAAI,EAAEL,QAAQ,CAACK,IAAI,GAAGA,IAAI;EAE9B,MAAMC,cAAc,GAAGlB,GAAG,CAACgB,aAAa,EAAE;IAAEC,IAAI,EAAEL,QAAQ,CAACK;EAAK,CAAC,CAAC;EAElE,MAAME,KAAK,GAAGjB,iBAAiB,CAACS,GAAG,EAAEO,cAAc,CAAC;EACpD,IAAIC,KAAK,EAAEP,QAAQ,CAACO,KAAK,GAAGA,KAAK;EAEjC,MAAMC,gBAAgB,GAAGpB,GAAG,CAACkB,cAAc,EAAE;IAAEC,KAAK,EAAEP,QAAQ,CAACO;EAAM,CAAC,CAAC;EAEvE,MAAME,OAAO,GAAGlB,mBAAmB,CAACQ,GAAG,EAAES,gBAAgB,CAAC;EAC1D,IAAIC,OAAO,EAAET,QAAQ,CAACS,OAAO,GAAGA,OAAO;EAEvC,MAAMC,gBAAgB,GAAGtB,GAAG,CAACoB,gBAAgB,EAAE;IAAEC,OAAO,EAAET,QAAQ,CAACS;EAAQ,CAAC,CAAC;EAE7E,MAAME,OAAO,GAAGlB,mBAAmB,CAACM,GAAG,EAAEW,gBAAgB,CAAC;EAC1D,IAAIC,OAAO,EAAEX,QAAQ,CAACW,OAAO,GAAGA,OAAO;EAEvC,OAAOX,QAAQ;AACjB;;AAEA;AACA,eAAeJ,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}