{"ast":null,"code":"import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"Q\", \"L\", \"w\", \"I\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n  priority = 110;\n  parse(dateString, token, match) {\n    const valueCallback = value => value - 1;\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: \"month\"\n        }), valueCallback);\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return match.month(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}","map":{"version":3,"names":["numericPatterns","Parser","mapValue","parseNDigits","parseNumericPattern","MonthParser","incompatibleTokens","priority","parse","dateString","token","match","valueCallback","value","month","ordinalNumber","unit","width","context","validate","_date","set","date","_flags","setMonth","setHours"],"sources":["D:/projeto-ts/node_modules/date-fns/parse/_lib/parsers/MonthParser.mjs"],"sourcesContent":["import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,kBAAkB;AAClD,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,QAAQ,EAAEC,YAAY,EAAEC,mBAAmB,QAAQ,cAAc;AAE1E,OAAO,MAAMC,WAAW,SAASJ,MAAM,CAAC;EACtCK,kBAAkB,GAAG,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ;EAEDC,QAAQ,GAAG,GAAG;EAEdC,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,MAAMC,aAAa,GAAIC,KAAK,IAAKA,KAAK,GAAG,CAAC;IAE1C,QAAQH,KAAK;MACX;MACA,KAAK,GAAG;QACN,OAAOR,QAAQ,CACbE,mBAAmB,CAACJ,eAAe,CAACc,KAAK,EAAEL,UAAU,CAAC,EACtDG,aACF,CAAC;MACH;MACA,KAAK,IAAI;QACP,OAAOV,QAAQ,CAACC,YAAY,CAAC,CAAC,EAAEM,UAAU,CAAC,EAAEG,aAAa,CAAC;MAC7D;MACA,KAAK,IAAI;QACP,OAAOV,QAAQ,CACbS,KAAK,CAACI,aAAa,CAACN,UAAU,EAAE;UAC9BO,IAAI,EAAE;QACR,CAAC,CAAC,EACFJ,aACF,CAAC;MACH;MACA,KAAK,KAAK;QACR,OACED,KAAK,CAACG,KAAK,CAACL,UAAU,EAAE;UACtBQ,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFP,KAAK,CAACG,KAAK,CAACL,UAAU,EAAE;UAAEQ,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;;MAGvE;MACA,KAAK,OAAO;QACV,OAAOP,KAAK,CAACG,KAAK,CAACL,UAAU,EAAE;UAC7BQ,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MACA,KAAK,MAAM;MACX;QACE,OACEP,KAAK,CAACG,KAAK,CAACL,UAAU,EAAE;UAAEQ,KAAK,EAAE,MAAM;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC,IACjEP,KAAK,CAACG,KAAK,CAACL,UAAU,EAAE;UACtBQ,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFP,KAAK,CAACG,KAAK,CAACL,UAAU,EAAE;UAAEQ,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;IAEzE;EACF;EAEAC,QAAQA,CAACC,KAAK,EAAEP,KAAK,EAAE;IACrB,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,EAAE;EAClC;EAEAQ,GAAGA,CAACC,IAAI,EAAEC,MAAM,EAAEV,KAAK,EAAE;IACvBS,IAAI,CAACE,QAAQ,CAACX,KAAK,EAAE,CAAC,CAAC;IACvBS,IAAI,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAOH,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}